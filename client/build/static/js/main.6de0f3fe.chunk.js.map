{"version":3,"sources":["Store.js","Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["socket","CTX","React","createContext","initState","listing1","from","msg","listing2","reducer","state","action","payload","listing","type","sendChatAction","value","emit","Store","props","useReducer","allChats","dispatch","io","on","console","log","user","Math","random","toFixed","Provider","children","useStyles","makeStyles","theme","root","margin","padding","spacing","flex","display","alignItems","listingCard","width","height","borderRight","chatWindow","chatBox","btn","Dashboard","classes","useContext","listings","Object","keys","useState","activeListing","changeActiveListing","textValue","changeTextValue","Paper","className","variant","component","List","map","ListItem","onClick","e","target","innerText","key","button","ListItemText","primary","chat","i","Chip","label","chip","gutterBottom","TextField","onChange","onKeyPress","event","Button","color","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6de0f3fe.chunk.js","sourcesContent":["import React from \"react\";\nimport io from \"socket.io-client\";\n\nexport const CTX = React.createContext();\n\nconst initState = {\n  listing1: [{ from: \"\", msg: \"\" }],\n  listing2: [{ from: \"\", msg: \"\" }]\n};\n\nfunction reducer(state, action) {\n  const { from, msg, listing } = action.payload;\n  switch (action.type) {\n    case \"RECEIVE_MESSAGE\":\n      return {\n        ...state,\n        [listing]: [...state[listing], { from, msg }]\n      };\n    default:\n      return state;\n  }\n}\n\nlet socket;\n\nfunction sendChatAction(value) {\n  socket.emit(\"chat message\", value);\n}\n\nexport default function Store(props) {\n  const [allChats, dispatch] = React.useReducer(reducer, initState);\n\n  if (!socket) {\n    socket = io(\":3002\");\n    socket.on(\"chat message\", function(msg) {\n      dispatch({ type: \"RECEIVE_MESSAGE\", payload: msg });\n      console.log(msg);\n    });\n  }\n\n  const user = \"Justin\" + Math.random(100).toFixed(2);\n\n  return (\n    <CTX.Provider value={{ allChats, sendChatAction, user }}>\n      {\" \"}\n      {props.children}\n    </CTX.Provider>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typorgraphy from \"@material-ui/core/Typography\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { CTX } from \"./Store\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: \"50px\",\n    padding: theme.spacing(3, 2)\n  },\n  flex: {\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  listingCard: {\n    width: \"30%\",\n    height: \"300px\",\n    borderRight: \"1px solid grey\"\n  },\n  chatWindow: {\n    width: \"70%\",\n    height: \"300px\",\n    padding: \"20px\"\n  },\n  chatBox: {\n    width: \"85%\"\n  },\n  btn: {\n    width: \"15%\"\n  }\n}));\n\nexport default function Dashboard() {\n  const classes = useStyles();\n\n  // CTX Store\n  const { allChats, sendChatAction, user } = React.useContext(CTX);\n\n  console.log({ allChats });\n\n  const listings = Object.keys(allChats);\n\n  // local state\n  const [activeListing, changeActiveListing] = React.useState(listings[0]);\n  const [textValue, changeTextValue] = React.useState(\"\");\n\n  //   handleKeyPress = event => {\n  //     if (event.key === \"Enter\") {\n  //         console.log(\"enter was pressed\");\n  //     }\n  //   };\n\n  return (\n    <div>\n      <Paper className={classes.root}>\n        <Typorgraphy variant=\"h4\" component=\"h4\">\n          Chat App\n        </Typorgraphy>\n        <Typorgraphy variant=\"h5\" component=\"h5\">\n          {activeListing}\n        </Typorgraphy>\n        <div className={classes.flex}>\n          <div className={classes.listingCard}>\n            <List>\n              {listings.map(listing => (\n                <ListItem\n                  onClick={e => changeActiveListing(e.target.innerText)}\n                  key={listing}\n                  button\n                >\n                  <ListItemText primary={listing}></ListItemText>\n                </ListItem>\n              ))}\n            </List>\n          </div>\n          <div className={classes.chatWindow}>\n            {allChats[activeListing].map((chat, i) => (\n              <div className={classes.flex} key={i}>\n                <Chip label={chat.from} className={classes.chip} />\n                <Typorgraphy variant=\"body1\" gutterBottom>\n                  {chat.msg}\n                </Typorgraphy>\n              </div>\n            ))}\n          </div>\n        </div>\n        <div className={classes.flex}>\n          <TextField\n            label=\"Send a chat\"\n            className={classes.chatBox}\n            value={textValue}\n            onChange={e => changeTextValue(e.target.value)}\n            onKeyPress={event => {\n              if (event.key === \"Enter\") {\n                console.log(\"enter was pressed\");\n                sendChatAction({\n                  from: user,\n                  msg: textValue,\n                  listing: activeListing\n                });\n                changeTextValue(\"\");\n              }\n            }}\n          />\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              sendChatAction({\n                from: user,\n                msg: textValue,\n                listing: activeListing\n              });\n              changeTextValue(\"\");\n            }}\n          >\n            Send\n          </Button>\n        </div>\n      </Paper>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Dashboard from \"./Dashboard\";\nimport Store from \"./Store\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Store>\n        <Dashboard />\n      </Store>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}